// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebTechnology.API;

#nullable disable

namespace WebTechnology.Repository.Migrations
{
    [DbContext(typeof(WebTech))]
    [Migration("20250512133313_AddPublicIdToTableCustomer")]
    partial class AddPublicIdToTableCustomer
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");
            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WebTechnology.API.Action", b =>
                {
                    b.Property<string>("Actionid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("actionid");

                    b.Property<string>("ActionName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("action_name");

                    b.Property<DateTime?>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Actionid")
                        .HasName("PRIMARY");

                    b.ToTable("actions", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.ApplyVoucher", b =>
                {
                    b.Property<string>("Applyid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("applyid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Orderid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("orderid");

                    b.Property<string>("Voucherid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("voucherid");

                    b.HasKey("Applyid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Voucherid" }, "FK_apply_vouchers_vouchers");

                    b.HasIndex(new[] { "Orderid", "Voucherid" }, "unique_order_voucher")
                        .IsUnique();

                    b.ToTable("apply_vouchers", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Brand", b =>
                {
                    b.Property<string>("Brand1")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("brand");

                    b.Property<string>("BrandName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("brand_name");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("country");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("LogoData")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("logo_data");

                    b.Property<string>("ManufactureAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("manufacture_address");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("website");

                    b.HasKey("Brand1")
                        .HasName("PRIMARY");

                    b.ToTable("brands", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Cart", b =>
                {
                    b.Property<string>("Cartid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("cartid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Cartid")
                        .HasName("PRIMARY");

                    b.ToTable("carts", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.CartItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("id");

                    b.Property<string>("CartId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("cart_id");

                    b.Property<string>("Productid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("productid");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "CartId", "Productid" }, "unique_cart_product")
                        .IsUnique();

                    b.ToTable("cart_items", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Category", b =>
                {
                    b.Property<string>("Categoryid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("categoryid");

                    b.Property<string>("CategoryName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("category_name");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<string>("Parentid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("parentid");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Categoryid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Parentid" }, "FK_categories_parents");

                    b.ToTable("categories", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Comment", b =>
                {
                    b.Property<string>("Commentid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("commentid");

                    b.Property<string>("CommentText")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("comment_text");

                    b.Property<DateTime?>("CommentedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("commented_at");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("modified_at");

                    b.Property<string>("Reviewid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("reviewid");

                    b.HasKey("Commentid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Reviewid" }, "FK_comment_review");

                    b.ToTable("comment", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Customer", b =>
                {
                    b.Property<string>("Customerid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("customerid");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("address");

                    b.Property<string>("Avatar")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("avatar");

                    b.Property<DateTime?>("Dob")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("dob");

                    b.Property<string>("Firstname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("firstname");

                    b.Property<string>("Gender")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("gender");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<string>("Middlename")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("middlename");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone_number");

                    b.Property<string>("Publicid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("publicid");

                    b.Property<string>("Surname")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("surname");

                    b.HasKey("Customerid")
                        .HasName("PRIMARY");

                    b.ToTable("customers", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Dimension", b =>
                {
                    b.Property<string>("Dimensionid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("dimensionid");

                    b.Property<decimal?>("HeightValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("height_value");

                    b.Property<decimal?>("LengthValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("length_value");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<string>("Productid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("productid");

                    b.Property<decimal?>("WeightValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("weight_value");

                    b.Property<decimal?>("WidthValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("width_value");

                    b.HasKey("Dimensionid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Productid" }, "FK_dimensions_products");

                    b.ToTable("dimensions", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Image", b =>
                {
                    b.Property<string>("Imageid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("imageid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("ImageData")
                        .HasColumnType("LONGTEXT")
                        .HasColumnName("image_data");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<string>("Order")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("order");

                    b.Property<string>("Productid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("productid");

                    b.Property<string>("Publicid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("publicid");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Imageid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Productid" }, "FK_images_products");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Log", b =>
                {
                    b.Property<string>("Logid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("logid");

                    b.Property<string>("Actionid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("actionid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("DescriptionDetails")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description_details");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Status")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("status");

                    b.Property<string>("Useragent")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("useragent");

                    b.Property<string>("Userid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("userid");

                    b.HasKey("Logid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Userid" }, "FK_logs_users");

                    b.ToTable("logs", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Order", b =>
                {
                    b.Property<string>("Orderid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("orderid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("CustomerId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<bool?>("IsSuccess")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_success");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<DateTime?>("OrderDate")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("order_date");

                    b.Property<string>("OrderNumber")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("order_number");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("payment_method");

                    b.Property<string>("ShippingAddress")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("shipping_address");

                    b.Property<string>("ShippingCode")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("shipping_code");

                    b.Property<decimal?>("ShippingFee")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("shipping_fee");

                    b.Property<string>("StatusId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("status_id");

                    b.Property<decimal?>("TotalPrice")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("total_price");

                    b.HasKey("Orderid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "StatusId" }, "FK_orders_order_status");

                    b.HasIndex(new[] { "PaymentMethod" }, "FK_orders_payments");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.OrderDetail", b =>
                {
                    b.Property<string>("OrderDetailId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("order_detail_id");

                    b.Property<string>("OrderId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("order_id");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("ProductId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("product_id");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("OrderDetailId")
                        .HasName("PRIMARY");

                    b.HasIndex("OrderId");

                    b.HasIndex(new[] { "ProductId" }, "FK_order_details_products");

                    b.ToTable("order_details", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.OrderLog", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("NewStatusId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("new_status_id");

                    b.Property<string>("OldStatusId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("old_status_id");

                    b.Property<string>("OrderId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("order_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "OrderId" }, "FK_order_log_orders");

                    b.ToTable("order_log", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.OrderStatus", b =>
                {
                    b.Property<string>("StatusId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("StatusId")
                        .HasName("PRIMARY");

                    b.ToTable("order_status", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Parent", b =>
                {
                    b.Property<string>("Parentid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("parentid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("ParentName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("parent_name");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Parentid")
                        .HasName("PRIMARY");

                    b.ToTable("parents", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Payment", b =>
                {
                    b.Property<string>("Paymentid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("paymentid");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("PaymentName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("payment_name");

                    b.HasKey("Paymentid")
                        .HasName("PRIMARY");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Permission", b =>
                {
                    b.Property<string>("Permissionid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("permissionid");

                    b.Property<string>("Actionid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("actionid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<string>("Roleid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("roleid");

                    b.HasKey("Permissionid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Actionid" }, "FK_permissions_actions");

                    b.HasIndex(new[] { "Roleid", "Actionid" }, "unique_role_action")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Product", b =>
                {
                    b.Property<string>("Productid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("productid");

                    b.Property<string>("Bar")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("bar");

                    b.Property<string>("Brand")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("brand");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DeletedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("varchar(1000)")
                        .HasColumnName("description");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<string>("ProductName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("product_name");

                    b.Property<string>("Sku")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sku");

                    b.Property<int?>("SoldQuantity")
                        .HasColumnType("int")
                        .HasColumnName("sold_quantity");

                    b.Property<string>("StatusId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("status_id");

                    b.Property<int?>("Stockquantity")
                        .HasColumnType("int")
                        .HasColumnName("stockquantity");

                    b.Property<string>("Unit")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Productid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Brand" }, "FK_products_brands");

                    b.HasIndex(new[] { "StatusId" }, "FK_products_product_status");

                    b.HasIndex(new[] { "Unit" }, "FK_products_units");

                    b.ToTable("products", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.ProductCategory", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("id");

                    b.Property<string>("Categoryid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("categoryid");

                    b.Property<string>("Productid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("productid");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Categoryid" }, "FK_product_categories_categories");

                    b.HasIndex(new[] { "Productid", "Categoryid" }, "unique_product_category")
                        .IsUnique();

                    b.ToTable("product_categories", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.ProductPrice", b =>
                {
                    b.Property<string>("Ppsid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ppsid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDefault")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_default");

                    b.Property<decimal?>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("price");

                    b.Property<string>("Productid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("productid");

                    b.HasKey("Ppsid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Productid" }, "FK_product_prices_products");

                    b.ToTable("product_prices", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.ProductStatus", b =>
                {
                    b.Property<string>("StatusId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("StatusId")
                        .HasName("PRIMARY");

                    b.ToTable("product_status", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.ProductTrend", b =>
                {
                    b.Property<string>("Ptsid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("ptsid");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("EndDate")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<string>("Productid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("productid");

                    b.Property<DateTime?>("StartDate")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<string>("Trend")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("trend");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Ptsid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Trend" }, "FK_product_trends_trends");

                    b.HasIndex(new[] { "Productid", "Trend" }, "unique_product_trend")
                        .IsUnique();

                    b.ToTable("product_trends", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Review", b =>
                {
                    b.Property<string>("Reviewid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("reviewid");

                    b.Property<string>("Customerid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("customerid");

                    b.Property<string>("Productid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("productid");

                    b.Property<int?>("Rate")
                        .HasColumnType("int")
                        .HasColumnName("rate");

                    b.HasKey("Reviewid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Productid" }, "FK_review_products");

                    b.HasIndex(new[] { "Customerid", "Productid" }, "unique_customer_product")
                        .IsUnique();

                    b.ToTable("review", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Role", b =>
                {
                    b.Property<string>("Roleid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("roleid");

                    b.Property<DateTime?>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("RoleName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.HasKey("Roleid")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Sysdiagram", b =>
                {
                    b.Property<int>("DiagramId")
                        .HasColumnType("int")
                        .HasColumnName("diagram_id");

                    b.Property<byte[]>("Definition")
                        .HasColumnType("longblob")
                        .HasColumnName("definition");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("varchar(160)")
                        .HasColumnName("name");

                    b.Property<int>("PrincipalId")
                        .HasColumnType("int")
                        .HasColumnName("principal_id");

                    b.Property<int?>("Version")
                        .HasColumnType("int")
                        .HasColumnName("version");

                    b.HasKey("DiagramId")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "PrincipalId", "Name" }, "UK_principal_name")
                        .IsUnique();

                    b.ToTable("sysdiagrams", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Trend", b =>
                {
                    b.Property<string>("Trend1")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("trend");

                    b.Property<string>("BannerData")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("banner_data");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<int?>("Priority")
                        .HasColumnType("int")
                        .HasColumnName("priority");

                    b.Property<string>("TrendName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("trend_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Trend1")
                        .HasName("PRIMARY");

                    b.ToTable("trends", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Unit", b =>
                {
                    b.Property<string>("Unit1")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("unit");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("notes");

                    b.Property<string>("UnitName")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("unit_name");

                    b.Property<string>("UnitSymbol")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("unit_symbol");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Unit1")
                        .HasName("PRIMARY");

                    b.ToTable("units", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.User", b =>
                {
                    b.Property<string>("Userid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("userid");

                    b.Property<bool?>("Authenticate")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("authenticate");

                    b.Property<int>("CountAuth")
                        .HasColumnType("int")
                        .HasColumnName("count_Auth");

                    b.Property<DateTime?>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<bool?>("IsDeleted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_deleted");

                    b.Property<string>("Otp")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("otp");

                    b.Property<string>("Password")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password_reset_token");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(1024)
                        .HasColumnType("varchar(1024)")
                        .HasColumnName("refresh_token");

                    b.Property<string>("Roleid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("roleid");

                    b.Property<string>("StatusId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("username");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("verified_at");

                    b.HasKey("Userid")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Roleid" }, "FK_users_roles");

                    b.HasIndex(new[] { "StatusId" }, "FK_users_user_status");

                    b.HasIndex(new[] { "Email" }, "unique_email")
                        .IsUnique();

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.UserStatus", b =>
                {
                    b.Property<string>("StatusId")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("status_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("StatusId")
                        .HasName("PRIMARY");

                    b.ToTable("user_status", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.Voucher", b =>
                {
                    b.Property<string>("Voucherid")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("voucherid");

                    b.Property<string>("Code")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateTime?>("CreatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("created_at");

                    b.Property<int?>("DiscountType")
                        .HasMaxLength(50)
                        .HasColumnType("int")
                        .HasColumnName("discount_type");

                    b.Property<decimal?>("DiscountValue")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("discount_value");

                    b.Property<DateTime?>("EndDate")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("end_date");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.Property<decimal?>("MaxDiscount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("max_discount");

                    b.Property<string>("Metadata")
                        .HasMaxLength(64)
                        .HasColumnType("varchar(64)")
                        .HasColumnName("metadata");

                    b.Property<decimal?>("MinOrder")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("min_order");

                    b.Property<DateTime?>("StartDate")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)")
                        .HasColumnName("updated_at");

                    b.Property<int?>("UsageLimit")
                        .HasColumnType("int")
                        .HasColumnName("usage_limit");

                    b.Property<int?>("UsedCount")
                        .HasColumnType("int")
                        .HasColumnName("used_count");

                    b.HasKey("Voucherid")
                        .HasName("PRIMARY");

                    b.ToTable("vouchers", (string)null);
                });

            modelBuilder.Entity("WebTechnology.API.ApplyVoucher", b =>
                {
                    b.HasOne("WebTechnology.API.Order", "Order")
                        .WithMany("ApplyVouchers")
                        .HasForeignKey("Orderid")
                        .HasConstraintName("FK_apply_vouchers_orders");

                    b.HasOne("WebTechnology.API.Voucher", "Voucher")
                        .WithMany("ApplyVouchers")
                        .HasForeignKey("Voucherid")
                        .HasConstraintName("FK_apply_vouchers_vouchers");

                    b.Navigation("Order");

                    b.Navigation("Voucher");
                });

            modelBuilder.Entity("WebTechnology.API.Cart", b =>
                {
                    b.HasOne("WebTechnology.API.Customer", "CartNavigation")
                        .WithOne("Cart")
                        .HasForeignKey("WebTechnology.API.Cart", "Cartid")
                        .IsRequired()
                        .HasConstraintName("FK_carts_customers");

                    b.Navigation("CartNavigation");
                });

            modelBuilder.Entity("WebTechnology.API.CartItem", b =>
                {
                    b.HasOne("WebTechnology.API.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .HasConstraintName("FK_cart_items_carts");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("WebTechnology.API.Category", b =>
                {
                    b.HasOne("WebTechnology.API.Parent", "Parent")
                        .WithMany("Categories")
                        .HasForeignKey("Parentid")
                        .HasConstraintName("FK_categories_parents");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("WebTechnology.API.Comment", b =>
                {
                    b.HasOne("WebTechnology.API.Review", "Review")
                        .WithMany("Comments")
                        .HasForeignKey("Reviewid")
                        .HasConstraintName("FK_comment_review");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("WebTechnology.API.Customer", b =>
                {
                    b.HasOne("WebTechnology.API.User", "CustomerNavigation")
                        .WithOne("Customer")
                        .HasForeignKey("WebTechnology.API.Customer", "Customerid")
                        .IsRequired()
                        .HasConstraintName("FK_customers_users");

                    b.Navigation("CustomerNavigation");
                });

            modelBuilder.Entity("WebTechnology.API.Dimension", b =>
                {
                    b.HasOne("WebTechnology.API.Product", "Product")
                        .WithMany("Dimensions")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_dimensions_products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebTechnology.API.Image", b =>
                {
                    b.HasOne("WebTechnology.API.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_images_products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebTechnology.API.Log", b =>
                {
                    b.HasOne("WebTechnology.API.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("Userid")
                        .HasConstraintName("FK_logs_users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebTechnology.API.Order", b =>
                {
                    b.HasOne("WebTechnology.API.Payment", "PaymentMethodNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentMethod")
                        .HasConstraintName("FK_orders_payments");

                    b.HasOne("WebTechnology.API.OrderStatus", "Status")
                        .WithMany("Orders")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_orders_order_status");

                    b.Navigation("PaymentMethodNavigation");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebTechnology.API.OrderDetail", b =>
                {
                    b.HasOne("WebTechnology.API.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_order_details_orders");

                    b.HasOne("WebTechnology.API.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_order_details_products");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebTechnology.API.OrderLog", b =>
                {
                    b.HasOne("WebTechnology.API.Order", "Order")
                        .WithMany("OrderLogs")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_order_log_orders");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("WebTechnology.API.Permission", b =>
                {
                    b.HasOne("WebTechnology.API.Action", "Action")
                        .WithMany("Permissions")
                        .HasForeignKey("Actionid")
                        .HasConstraintName("FK_permissions_actions");

                    b.HasOne("WebTechnology.API.Role", "Role")
                        .WithMany("Permissions")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("FK_permissions_roles");

                    b.Navigation("Action");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WebTechnology.API.Product", b =>
                {
                    b.HasOne("WebTechnology.API.Brand", "BrandNavigation")
                        .WithMany("Products")
                        .HasForeignKey("Brand")
                        .HasConstraintName("FK_products_brands");

                    b.HasOne("WebTechnology.API.ProductStatus", "Status")
                        .WithMany("Products")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_products_product_status");

                    b.HasOne("WebTechnology.API.Unit", "UnitNavigation")
                        .WithMany("Products")
                        .HasForeignKey("Unit")
                        .HasConstraintName("FK_products_units");

                    b.Navigation("BrandNavigation");

                    b.Navigation("Status");

                    b.Navigation("UnitNavigation");
                });

            modelBuilder.Entity("WebTechnology.API.ProductCategory", b =>
                {
                    b.HasOne("WebTechnology.API.Category", "Category")
                        .WithMany("ProductCategories")
                        .HasForeignKey("Categoryid")
                        .HasConstraintName("FK_product_categories_categories");

                    b.HasOne("WebTechnology.API.Product", "Product")
                        .WithMany("ProductCategories")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_product_categories_products");

                    b.Navigation("Category");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebTechnology.API.ProductPrice", b =>
                {
                    b.HasOne("WebTechnology.API.Product", "Product")
                        .WithMany("ProductPrices")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_product_prices_products");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebTechnology.API.ProductTrend", b =>
                {
                    b.HasOne("WebTechnology.API.Product", "Product")
                        .WithMany("ProductTrends")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_product_trends_products");

                    b.HasOne("WebTechnology.API.Trend", "TrendNavigation")
                        .WithMany("ProductTrends")
                        .HasForeignKey("Trend")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_product_trends_trends");

                    b.Navigation("Product");

                    b.Navigation("TrendNavigation");
                });

            modelBuilder.Entity("WebTechnology.API.Review", b =>
                {
                    b.HasOne("WebTechnology.API.Customer", "Customer")
                        .WithMany("Reviews")
                        .HasForeignKey("Customerid")
                        .HasConstraintName("FK_review_customers");

                    b.HasOne("WebTechnology.API.Product", "Product")
                        .WithMany("Reviews")
                        .HasForeignKey("Productid")
                        .HasConstraintName("FK_review_products");

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WebTechnology.API.User", b =>
                {
                    b.HasOne("WebTechnology.API.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("Roleid")
                        .HasConstraintName("FK_users_roles");

                    b.HasOne("WebTechnology.API.UserStatus", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("FK_users_user_status");

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebTechnology.API.Action", b =>
                {
                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("WebTechnology.API.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebTechnology.API.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("WebTechnology.API.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("WebTechnology.API.Customer", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebTechnology.API.Order", b =>
                {
                    b.Navigation("ApplyVouchers");

                    b.Navigation("OrderDetails");

                    b.Navigation("OrderLogs");
                });

            modelBuilder.Entity("WebTechnology.API.OrderStatus", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebTechnology.API.Parent", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("WebTechnology.API.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WebTechnology.API.Product", b =>
                {
                    b.Navigation("Dimensions");

                    b.Navigation("Images");

                    b.Navigation("OrderDetails");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductPrices");

                    b.Navigation("ProductTrends");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("WebTechnology.API.ProductStatus", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebTechnology.API.Review", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WebTechnology.API.Role", b =>
                {
                    b.Navigation("Permissions");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebTechnology.API.Trend", b =>
                {
                    b.Navigation("ProductTrends");
                });

            modelBuilder.Entity("WebTechnology.API.Unit", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("WebTechnology.API.User", b =>
                {
                    b.Navigation("Customer");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("WebTechnology.API.UserStatus", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("WebTechnology.API.Voucher", b =>
                {
                    b.Navigation("ApplyVouchers");
                });
#pragma warning restore 612, 618
        }
    }
}
